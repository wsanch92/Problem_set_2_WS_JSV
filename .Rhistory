value.var = "z",
margins="regimen")
var_test_pers_reg <- var_test_pers_reg %>% mutate(ContEspec=var_test_pers_reg[,"1"]/var_test_pers_reg[,"(all)"],
Subsidiado=var_test_pers_reg[,"3"]/var_test_pers_reg[,"(all)"])
var_test_pers_reg <- var_test_pers_reg[,c("id", "ContEspec", "Subsidiado")]
## Variables: proporción Cotiza pensión
var_test_pers_cotiz <-  dcast(df_test_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_test_pers_cotiz <- var_test_pers_cotiz %>% mutate(prop_si_cotiza=var_test_pers_cotiz[,"1"]/var_test_pers_cotiz[,"(all)"],
prop_no_cotiza=var_test_pers_cotiz[,"2"]/var_test_pers_cotiz[,"(all)"],
Pensionado=var_test_pers_cotiz[,"3"]/var_test_pers_cotiz[,"(all)"])
var_test_pers_cotiz <- var_test_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
### Formación final de las Bases de hogar para Train y Test ------------------------------------------
## Train
df_train_hog_final <- df_train_hog %>% left_join(IngrXhog, by="id") %>%
left_join(df_train_hog_vars, by="id") %>%
left_join(var_train_pers_sexo, by="id") %>%
left_join(var_train_pers_reg, by="id") %>%
left_join(var_train_pers_cotiz, by="id") %>%  mutate(Pobre=ifelse(Ingtot_hog<Lp*personas_x_Ug,
1,
0)) %>%
mutate(Pobre=factor(Pobre, level=c(1,0), labels=c("Pobre", "No_Pobre")))
skim(df_train_hog_final)
## Test
df_test_hog_final <- df_test_hog %>%
left_join(df_test_hog_vars, by="id") %>%
left_join(var_test_pers_sexo, by="id") %>%
left_join(var_test_pers_reg, by="id") %>%
left_join(var_test_pers_cotiz, by="id")
prop.table(table(df_train_hog_final$Pobre))
df_train_hog_final[is.na(df_train_hog_final$actividad_jef),]$id
table(is.na(df_train_per_1$Ingtot_fin))
table(is.na(IngrXhog$Ingtot_hog))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
# Revisión y cruce de bases de datos --------------------------------------
## Existe un error donde hay un hogar unipersonal con una jefe de hogar de 11 años sin actividad.  Decidimos eliminarlo
#View(df_train_per[df_train_per$id=='5bb0cc6363e59a272bf9c1f5',])
df_train_per_1 <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
df_train_per <- df_train_per[-(df_train_per$id=="5bb0cc6363e59a272bf9c1f5"),]
#nrow(df_train_per)
df_train_hog <- df_train_hog[-(df_train_hog$id=="5bb0cc6363e59a272bf9c1f5"),]
table(is.na(df_train_per_1$Ingtot_fin))
table(is.na(df_train_per_1$Ingtot))
df_train_per_1 <- df_train_per_1 %>% mutate(Ingtot_fin=ifelse(is.na(Ingtot)==TRUE,
0,
Ingtot))
table(is.na(df_train_per_1$Ingtot))
table(is.na(df_train_per_1$Ingtot_fin))
table(is.na(Ingtot_hog$Ingtot_hog))
table(is.na(IngrXhog$Ingtot_hog))
IngrXhog <- df_train_per_1 %>%  group_by(id) %>%
summarise(Ingtot_hog = sum(Ingtot_fin))
table(is.na(IngrXhog$Ingtot_hog))
names_df_tes_h <- colnames(df_test_hog)
vars_hogares<-c("id","Clase", "Dominio", "num_cuartos_hog", "num_cuartos_exclus_hog", "Ocupacion_vivienda", "pago_amortizacion",
"pago_estimado_arriendo", "pago_arriendo", "personas_x_hog", "personas_x_Ug", "Li", "Lp", "Fex_c", "Depto", "Fex_dpto")
names_df_tes_p <- colnames(df_test_per)
vars_personas<-c("id"              ,"Orden"          ,"Clase"        ,"Dominio"       ,"sexo"          ,"edad"          ,"parentesco"   ,"afiliacion_salud"  ,"regimen_salud"  ,"niv_educativo",
"escolaridad"     ,"actividad"  ,"oficio"       ,"tiempo_empresa","ocupacion_empleo"     ,"ReciHorasExtra","ReciPrimas"   ,"ReciBonificaciones","ReciAuxiAlimenta","ReciAuxiTransp",
"ReciSubsidFamil" ,"ReciSubsiEduc"  ,"AlimentoXpago","ViviendaXpago" ,"UsaRutaEmpresa","ReciIngEspecie","ReciPrimaServ","ReciPrimaNavid"    ,"ReciPrimaVaca"   ,"ReciViaticos",
"ReciBonificacion","HorasTrabSemana","P6870"        ,"cotiza_pension","P7040"         ,"P7045"         ,"P7050"        ,"P7090"             ,"P7110"           ,"P7120",
"P7150"           ,"P7160"          ,"P7310"        ,"P7350"         ,"P7422"         ,"P7472"         ,"P7495"        ,"P7500s2"           ,"P7500s3"         ,"P7505",
"P7510s1"         ,"ReciRemesas"    ,"ReciAyudaInst","P7510s5"       ,"P7510s6"       ,"P7510s7"       ,"PET"          ,"Ocupado"           ,"Descupado"      ,"Inactivo",
"Fex_c"           ,"Depto"          ,"Fex_dpto")
#h_test_dicc <- cbind(names_df_tes_h,vars_hogares)
#p_test_dicc <- cbind(names_df_tes_p,vars_personas)
colnames(df_test_per) <- vars_personas
colnames(df_train_per) <- vars_personas
colnames(df_test_hog) <- vars_hogares
colnames(df_train_hog) <- vars_hogares
table(is.na(df_train_per$regimen))
table(is.na(df_train_per$regimen_salud))
table(is.na(df_train_per$parentesco))
table(is.na(df_train_per$actividad))
table(is.na(df_train_per$niv_educativo))
df_train_per <- df_train_per %>% mutate(df_train_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
table(is.na(df_train_per$regimen_salud))
table(is.na(df_train_per$regimen))
table(is.na(df_train_per$actividad))
table(is.na(df_train_per$niv_educativo))
df_train_hog_vars <- df_train_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
table(is.na(df_train_hog_vars$edad_media))
table(is.na(df_train_hog_vars$actividad_jef))
df_train_hog_vars[is.na(df_train_hog_vars$actividad_jef),]$id
table(is.na(df_train_per$actividad))
table(is.na(df_train_hog_vars$actividad_jef))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
# Revisión y cruce de bases de datos --------------------------------------
## Existe un error donde hay un hogar unipersonal con una jefe de hogar de 11 años sin actividad.  Decidimos eliminarlo
#View(df_train_per[df_train_per$id=='5bb0cc6363e59a272bf9c1f5',])
nrow(df_train_per_1)
df_train_per_1 <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
# Revisión y cruce de bases de datos --------------------------------------
## Existe un error donde hay un hogar unipersonal con una jefe de hogar de 11 años sin actividad.  Decidimos eliminarlo
#View(df_train_per[df_train_per$id=='5bb0cc6363e59a272bf9c1f5',])
nrow(df_train_per_1)
df_train_per_1[is.na(df_train_per_1$actividad),]$id
df_train_per_1[is.na(df_train_per_1$P6040),]$id
df_train_per_1[is.na(df_train_per_1$P6020),]$id
View(df_train_per)
df_train_per_1[is.na(df_train_per_1$P6020),]$id
df_train_per_1[is.na(df_train_per_1$P6040),]$id
table(df_train_per_1[is.na(df_train_per_1$P6040),])
table(is.na(df_train_per_1$P6040))
df_train_per <- df_train_per[-(df_train_per$id=="5bb0cc6363e59a272bf9c1f5"),]
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
nrow(df_train_per_1)
df_train_per_1 <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
nrow(df_train_per_1)
table(is.na(df_train_per_1$P6040))
nrow(df_train_per)
df_train_per <- df_train_per[-(df_train_per$id=="5bb0cc6363e59a272bf9c1f5"),]
nrow(df_train_per)
table(is.na(df_train_per$P6040))
nrow(df_train_hog)
df_train_hog <- df_train_hog[-(df_train_hog$id=="5bb0cc6363e59a272bf9c1f5"),]
nrow(df_train_hog)
table(is.na(df_train_hog$P6040))
df_train_hog[(df_train_hog$id=="5bb0cc6363e59a272bf9c1f5"),]
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]$index
View(df_train_per_1)
rownames(df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),])
rownames(df_train_per_1[(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),])
View(df_train_per_1)
rownames(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5")
rownames(df_train_per_1$id="5bb0cc6363e59a272bf9c1f5")
df_train_per_1[(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
df_train_per_1[(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]$id
df_train_per_1[(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),] %>% head()
df_train_per_1[(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),] %>% View()
table(is.na(df_train_per_1$P6240))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
table(is.na(df_train_per_1$P6240))
df_train_per_1 <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
table(is.na(df_train_per_1$P6240))
df_train_per_2 <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),]
table(is.na(df_train_per_2$P6240))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog_1 <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_hog <- df_train_hog_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_hog)]
skim(df_train_per_1$Ingtot)
##revisar ingresos nulos
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$Ingtot),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$Ingtot),]$P6040)
#table(df_train_per_1[is.na(df_train_per_1$P6210s1),]$Depto)
#View(df_train_per_1[is.na(df_train_per_1$P6210s1),])
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$P6210s1),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$P6210s1),]$P6040)
## variables---------------------------------------------
df_train_per_1 <- df_train_per_1 %>% mutate(Ingtot_fin=ifelse(is.na(Ingtot)==TRUE,
0,
Ingtot))
#table(is.na(df_train_per_1$Ingtot_fin))
## Ingresos totales por hogar
IngrXhog <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),] %>%  group_by(id) %>%
summarise(Ingtot_hog = sum(Ingtot_fin))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog_1 <- read_rds("Data/train_hogares.rds")
df_train_per_11 <- read_rds("Data/train_personas.rds")
df_train_per_1 <- df_train_per_11[-(df_train_per_11$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_per <- df_train_per_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_hog <- df_train_hog_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_hog)]
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog_1 <- read_rds("Data/train_hogares.rds")
df_train_per_11 <- read_rds("Data/train_personas.rds")
df_train_per_1 <- df_train_per_11[-(df_train_per_11$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog_1[-(df_train_per_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_hog)]
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog_1 <- read_rds("Data/train_hogares.rds")
df_train_per_11 <- read_rds("Data/train_personas.rds")
df_train_per_1 <- df_train_per_11[-(df_train_per_11$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog_1[-(df_train_hog_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_hog)]
# Revisión y cruce de bases de datos --------------------------------------
skim(df_train_per_1$Ingtot)
##revisar ingresos nulos
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$Ingtot),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$Ingtot),]$P6040)
#table(df_train_per_1[is.na(df_train_per_1$P6210s1),]$Depto)
#View(df_train_per_1[is.na(df_train_per_1$P6210s1),])
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$P6210s1),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$P6210s1),]$P6040)
## variables---------------------------------------------
df_train_per_1 <- df_train_per_1 %>% mutate(Ingtot_fin=ifelse(is.na(Ingtot)==TRUE,
0,
Ingtot))
#table(is.na(df_train_per_1$Ingtot_fin))
## Ingresos totales por hogar
IngrXhog <- df_train_per_1 %>%  group_by(id) %>%
summarise(Ingtot_hog = sum(Ingtot_fin))
names_df_tes_h <- colnames(df_test_hog)
vars_hogares<-c("id","Clase", "Dominio", "num_cuartos_hog", "num_cuartos_exclus_hog", "Ocupacion_vivienda", "pago_amortizacion",
"pago_estimado_arriendo", "pago_arriendo", "personas_x_hog", "personas_x_Ug", "Li", "Lp", "Fex_c", "Depto", "Fex_dpto")
names_df_tes_p <- colnames(df_test_per)
vars_personas<-c("id"              ,"Orden"          ,"Clase"        ,"Dominio"       ,"sexo"          ,"edad"          ,"parentesco"   ,"afiliacion_salud"  ,"regimen_salud"  ,"niv_educativo",
"escolaridad"     ,"actividad"  ,"oficio"       ,"tiempo_empresa","ocupacion_empleo"     ,"ReciHorasExtra","ReciPrimas"   ,"ReciBonificaciones","ReciAuxiAlimenta","ReciAuxiTransp",
"ReciSubsidFamil" ,"ReciSubsiEduc"  ,"AlimentoXpago","ViviendaXpago" ,"UsaRutaEmpresa","ReciIngEspecie","ReciPrimaServ","ReciPrimaNavid"    ,"ReciPrimaVaca"   ,"ReciViaticos",
"ReciBonificacion","HorasTrabSemana","P6870"        ,"cotiza_pension","P7040"         ,"P7045"         ,"P7050"        ,"P7090"             ,"P7110"           ,"P7120",
"P7150"           ,"P7160"          ,"P7310"        ,"P7350"         ,"P7422"         ,"P7472"         ,"P7495"        ,"P7500s2"           ,"P7500s3"         ,"P7505",
"P7510s1"         ,"ReciRemesas"    ,"ReciAyudaInst","P7510s5"       ,"P7510s6"       ,"P7510s7"       ,"PET"          ,"Ocupado"           ,"Descupado"      ,"Inactivo",
"Fex_c"           ,"Depto"          ,"Fex_dpto")
#h_test_dicc <- cbind(names_df_tes_h,vars_hogares)
#p_test_dicc <- cbind(names_df_tes_p,vars_personas)
colnames(df_test_per) <- vars_personas
colnames(df_train_per) <- vars_personas
colnames(df_test_hog) <- vars_hogares
colnames(df_train_hog) <- vars_hogares
# Revisión y definición de variables ---------------------------------------
# Hogares
#'num_cuartos_exclus_hog', 'Ocupacion_vivienda', 'clase', "personas_x_hog", "personas_x_Ug" "Depto"
df_train_per <- df_train_per %>% mutate(df_train_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
## AGRUPAR POR HOGAR PARA VARIABLES DE ACTIVIDAD Y NIVEL EDUC DEL JEFE, EDAD PROMEDIO,
df_train_hog_vars <- df_train_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
table(is.na(df_train_hog_vars$actividad_jef))
table(is.na(df_train_per$actividad))
df_train_hog_vars[is.na(df_train_hog_vars$actividad_jef),]$id
## Proporción de hombres y mujeres
#var_train_pers_sexo_1<-pivot_wider(df_train_per[,c('id','sexo','z')],
#                                 names_from = sexo,
#                                 values_from = z,
#                                 values_fn =  ~sum(.x, na.rm = FALSE),
#                                 )
#var_train_pers_sexo_1[is.na(var_train_pers_sexo_1)] <- 0
var_train_pers_sexo <-  dcast(df_train_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_train_pers_sexo <- var_train_pers_sexo %>% mutate(prop_hombre=var_train_pers_sexo[,"1"]/var_train_pers_sexo[,"(all)"],
prop_mujer=var_train_pers_sexo[,"2"]/var_train_pers_sexo[,"(all)"])
var_train_pers_sexo <- var_train_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
## Variables: proporción Contributivo o Especial y Reg Subsidiado
var_train_pers_reg <-  dcast(df_train_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_train_pers_reg <- var_train_pers_reg %>% mutate(ContEspec=var_train_pers_reg[,"1"]/var_train_pers_reg[,"(all)"],
Subsidiado=var_train_pers_reg[,"3"]/var_train_pers_reg[,"(all)"])
var_train_pers_reg <- var_train_pers_reg[,c("id", "ContEspec", "Subsidiado")]
## Variables: proporción Cotiza pensión
var_train_pers_cotiz <-  dcast(df_train_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_train_pers_cotiz <- var_train_pers_cotiz %>% mutate(prop_si_cotiza=var_train_pers_cotiz[,"1"]/var_train_pers_cotiz[,"(all)"],
prop_no_cotiza=var_train_pers_cotiz[,"2"]/var_train_pers_cotiz[,"(all)"],
Pensionado=var_train_pers_cotiz[,"3"]/var_train_pers_cotiz[,"(all)"])
var_train_pers_cotiz <- var_train_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
## TEST ------------------------------------------------------------------
df_test_per <- df_test_per %>% mutate(df_test_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
## AGRUPAR POR HOGAR PARA VARIABLES DE ACTIVIDAD Y NIVEL EDUC DEL JEFE, EDAD PROMEDIO,
df_test_hog_vars <- df_test_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
## Proporción de hombres y mujeres
var_test_pers_sexo <-  dcast(df_test_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_test_pers_sexo <- var_test_pers_sexo %>% mutate(prop_hombre=var_test_pers_sexo[,"1"]/var_test_pers_sexo[,"(all)"],
prop_mujer=var_test_pers_sexo[,"2"]/var_test_pers_sexo[,"(all)"])
var_test_pers_sexo <- var_test_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
## Variables: proporción Contributivo o Especial y Reg Subsidiado
var_test_pers_reg <-  dcast(df_test_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_test_pers_reg <- var_test_pers_reg %>% mutate(ContEspec=var_test_pers_reg[,"1"]/var_test_pers_reg[,"(all)"],
Subsidiado=var_test_pers_reg[,"3"]/var_test_pers_reg[,"(all)"])
var_test_pers_reg <- var_test_pers_reg[,c("id", "ContEspec", "Subsidiado")]
## Variables: proporción Cotiza pensión
var_test_pers_cotiz <-  dcast(df_test_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_test_pers_cotiz <- var_test_pers_cotiz %>% mutate(prop_si_cotiza=var_test_pers_cotiz[,"1"]/var_test_pers_cotiz[,"(all)"],
prop_no_cotiza=var_test_pers_cotiz[,"2"]/var_test_pers_cotiz[,"(all)"],
Pensionado=var_test_pers_cotiz[,"3"]/var_test_pers_cotiz[,"(all)"])
var_test_pers_cotiz <- var_test_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
### Formación final de las Bases de hogar para Train y Test ------------------------------------------
## Train
df_train_hog_final <- df_train_hog %>% left_join(IngrXhog, by="id") %>%
left_join(df_train_hog_vars, by="id") %>%
left_join(var_train_pers_sexo, by="id") %>%
left_join(var_train_pers_reg, by="id") %>%
left_join(var_train_pers_cotiz, by="id") %>%  mutate(Pobre=ifelse(Ingtot_hog<Lp*personas_x_Ug,
1,
0)) %>%
mutate(Pobre=factor(Pobre, level=c(1,0), labels=c("Pobre", "No_Pobre")))
skim(df_train_hog_final)
## Test
df_test_hog_final <- df_test_hog %>%
left_join(df_test_hog_vars, by="id") %>%
left_join(var_test_pers_sexo, by="id") %>%
left_join(var_test_pers_reg, by="id") %>%
left_join(var_test_pers_cotiz, by="id")
prop.table(table(df_train_hog_final$Pobre))
##1)problema de clasificación donde debemos predicir la marca de pobreza
##Modelos: KNN(cambiando los vecinos),
#          Logit(un poco más eficiente computacionalmente)/Probit
#          Discriminantes Lineales
#          Discriminantes Cuadráticos
set.seed(202207) ## fijo la semilla
## particiones de la muestra
split1 <- createDataPartition(df_train_hog_final$Pobre, p = .7)[[1]]
length(split1)
other <- df_train_hog_final[-split1,]
nrow(other)
training <- df_train_hog_final[split1,] ## La muestra de entrenamiento "1"
##para usar la evaluación y testeo
#set.seed(202208)
split2 <- createDataPartition(other$Pobre, p = 1/3)[[1]]
evaluation <- other[split2,] ## La muestra de evaluación "2"
testing <- other[-split2,]   ## La muestra de testeo "3"
prop.table(table(training$Pobre))
prop.table(table(testing$Pobre))
prop.table(table(evaluation$Pobre))
rm(list=ls())
cat("\014")
setwd("C:/Users/walte/OneDrive/Documentos/Maestría en Economía Aplicada/Big Data/GitHub/Talleres/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2, class, caret, ROCR, pROC,fastAdaboost) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog_1 <- read_rds("Data/train_hogares.rds")
df_train_per_11 <- read_rds("Data/train_personas.rds")
df_train_per_1 <- df_train_per_11[-(df_train_per_11$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_per)]
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog_1[-(df_train_hog_1$id=="5bb0cc6363e59a272bf9c1f5"),colnames(df_test_hog)]
skim(df_train_per_1$Ingtot)
##revisar ingresos nulos
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$Ingtot),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$Ingtot),]$P6040)
#table(df_train_per_1[is.na(df_train_per_1$P6210s1),]$Depto)
#View(df_train_per_1[is.na(df_train_per_1$P6210s1),])
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$P6210s1),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$P6210s1),]$P6040)
skim(df_train_per_1$Ingtot)
