db<- read_rds("/Users/usuario/Desktop/Problem_set_1_WS_JSV/Data/Datos_geih_bogota.rds")
## Creación y tratamiento de variables
## ocupados  mayores de 18
db_1 <- db[db$age >= 18 & db$ocu == 1, ]
colnames(db_1)
##Análisis de ingresos totales
table(db_final$ingreso==0)
db_1[db_1$ingreso==0,]$ingtotes
variables_ingreso <- c("ingtot", "ingtotes", "ingtotob", "iof1", "iof1es", "iof2", "iof2es", "iof3h", "iof3hes", "iof3i", "iof3ies", "iof6", "iof6es", "isa", "isaes", "ie", "iees", "imdi", "imdies", "impa", "impaes", "p6240", "ocu", "relab")
j_1<- db_1[db_1$ingtot==0,variables_ingreso]
View(j_1)
skim(j_1)
##Luego de indentificar que las observaciones que tienen un ingreso total en 0 y que esto se mantienen aún luego de la imputación decidimos borrarlas, esto corresponde a 265 observaciones.
db_1<- db_1[db_1$ingtot>0,]
skim(db_1$ingtot)
#ggplot() + geom_histogram(data=db_1 , aes(x=y_total_m) , fill="coral1" , alpha=0.5) +
#geom_histogram(data=db_1 , aes(x=ingtotob) , fill="blue" , alpha=0.5)
## Creación de lista con las variables elegibles
variables <- c('age','ingtot','ingtotes','ingtotob','p6210','p6210s1','p6240','relab','sex','fex_c','mes','p6426','oficio')
db_final <- db_1[,variables]  ## Se filtra la base por la lista de variables elegibles
db_final%>%head()
colnames(db_final)
## Renombrar variables
names (db_final) <- c('edad','ingreso','ingtotes','ingtotob','niveleduc','p6210s1','actividad','ocupacion','sex','fex_c','mes','tiempoempresa','oficio')
db_final <- db_final[db_final$ocupacion!=8,]
vars_final <- c('edad','ingreso','niveleduc','actividad','ocupacion','sex','tiempoempresa','ocupacion','oficio')
db_final <- db_final %>% mutate(rangos_edad= case_when(edad <= 24 ~ "18-24",
edad >= 25 & edad < 30 ~ "25-29",
edad >= 30 & edad < 35 ~ "30-34",
edad >= 35 & edad < 40 ~ "35-39",
edad >= 40 & edad < 45 ~ "40-44",
edad >= 45 & edad < 50 ~ "45-49",
edad >= 50 & edad < 55 ~ "50-54",
edad >= 55 & edad < 60 ~ "55-59",
edad >= 60 & edad < 65 ~ "60-64",
edad >= 65 & edad < 70 ~ "65-69",
edad >= 70 & edad < 75 ~ "70-74",
edad >= 75 & edad < 80 ~ "75-79",
edad >= 80 ~ "80 y más"))
## variables de población  para hacer la pirámide poblacional
db_final  <- db_final %>% mutate( pob_sex=1)
db_final <- db_final %>% mutate(db_final, edad_sqr=edad^2) ## edad al cuadrado
db_final <- db_final %>% mutate(db_final, tiempoempresa_sqr=tiempoempresa^2) ## experiencia al cuadrado medido en meses
############################ Tablas y summarice  ############################
## Resumen de la base con las variables elegidas
skim(db_final[,vars_final])
## Gráficos
#ggplot() + geom_histogram(data=db_1 , aes(x=ingtot) , fill="coral1" , alpha=0.5) +
#geom_histogram(data=db_1 , aes(x=ingtotes) , fill="blue" , alpha=0.5) +
#geom_histogram(data=db_1 , aes(x=ingtotob) , fill="red" , alpha=0.5)
#
#ggplot() + geom_histogram(data=db_1 , aes(x=ingtot) , fill="coral1" , alpha=0.5) +
#geom_histogram(data=db_1 , aes(x=ingtotob) , fill="blue1" , alpha=0.5)
ggplot(data = db_final ,
mapping = aes(x = edad , y = ingreso , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = db_final ,
mapping = aes(x = rangos_edad , y = edad , group=as.factor(sex) , color=as.factor(sex))) +
geom_col()
## Pirámide poblacional en muestra
ggplot(db_final, aes(x = `rangos_edad`, y =  pob_sex, fill = sex)) +
geom_col(data = subset(db_final, sex == 1) %>% mutate(pob_sex = -pob_sex), width = 0.5, fill = "blue") +
geom_col(data = subset(db_final, sex == 0) %>% mutate(pob_sex = pob_sex), width = 0.5, fill = "pink") + coord_flip() +
scale_y_continuous( breaks = c(seq(-1200,-400, by = 400),
seq(0,1200, by=400)),
labels = c(seq(-1200,-400, by = 400)* -1,
seq(0,1200, by=400)))
##Regresiones y resultados
#Revisar las dos vareiables de ocupación porque una contiene los ocupados más la PET o PEA
reg1<-lm(ingreso~edad+edad_sqr,data=db_final)
reg2<-lm(ingreso~edad+edad_sqr+niveleduc,data=db_final)
reg3<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa,data=db_final)
reg4<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_final)
## debido a que el signo del coeficiente no es el esperado según la teoria, planteamos un modelo en el cual solo incluimos las personas que se encuentran trabajando
reg5<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr, factor(ocupacion),data=db_final)
reg5.1<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr, factor(ocupacion),data=db_final[db_final$actividad==1,])
reg5.2<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr, factor(oficio),data=db_final)
reg5.3<-lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr, factor(oficio),data=db_final[db_final$actividad==1,])
stargazer(reg1,reg2,reg3,reg4,reg5,reg5.1,reg5.2,reg5.3,type="text",out = "/Users/usuario/Desktop/Problem_set_1_WS_JSV/Data/regresiones.htm")
plot(db_final$edad,db_final$ingreso,xlab = 'Edad', ylab='Ingreso',cex=0.5)
abline(reg4, col = "red")
db_final$yhat_reg1 <-predict(reg1,db_final)
yhat_reg1<-predict(reg1,db_final)
mse_1<- mean((db_final$ingreso~yhat_reg1)^2)
db_final$yhat_reg2 <-predict(reg2)
yhat_reg2<-predict(reg2,db_final)
mse_2<- mean((db_final$ingreso~yhat_reg2)^2)
db_final$yhat_reg3 <-predict(reg3)
yhat_reg3<-predict(reg3,db_final)
mse_3<- mean((db_final$ingreso~yhat_reg3)^2)
db_final$yhat_reg4 <-predict(reg4)
yhat_reg4<-predict(reg4,db_final)
mse_4<- mean((db_final$ingreso~yhat_reg4)^2)
db_final$yhat_reg5 <-predict(reg5)
yhat_reg5<-predict(reg5,db_final)
mse_5<- mean((db_final$ingreso~yhat_reg5)^2)
db_final[db_final$actividad==1,]$yhat_reg5.1 <-predict(reg5.1)
yhat_reg5.1<-predict(reg5.1,db_final)
mse_5.1<- mean((db_final$ingreso~yhat_reg5.1)^2)
db_final$yhat_reg5.2 <-predict(reg5.2)
yhat_reg5.2<-predict(reg5.2,db_final)
mse_5.2<- mean((db_final$ingreso~yhat_reg5.2)^2)
db_final[db_final$actividad==1,]$yhat_reg5.3 <-predict(reg5.3)
yhat_reg5.3<-predict(reg5.3,db_final)
mse_5.3<- mean((db_final$ingreso~yhat_reg5.3)^2)
mse_f<-c(mse_1,mse_2,mse_3,mse_4,mse_5,mse_5.1,mse_5.2,mse_5.3)
mse_f
## grafico de ingreso predicho por edad
ggplot() +
geom_col(db_final , mapping = aes(x = edad, y = yhat_reg1, fill="reg1")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg2, fill="reg2")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg3, fill="reg3")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg4, fill="reg4")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg5, fill="reg5")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg5.1, fill="reg5.1")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg5.2, fill="reg5.2")) +
geom_col(db_final , mapping = aes(x = edad, y =  yhat_reg5.3, fill="reg5.3"))
## Grafico ingresos predicho por edad modelo 4
ggplot() +
geom_line(db_final , mapping = aes(x = edad, y =  yhat_reg4, fill="reg4")) +
geom_line(db_final, mapping = aes(x = edad, y = ingreso, fill="ingreso"))
## Bootstrap
set.seed(2022)
prueba_boot.fn<-function(db_final,index){
## el index se utilizará para obtener los pesos para el bootstrap
coef(lm(ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_final, subset = index))
}
boot<-boot(db_final, prueba_boot.fn, R=1000)
boot
reg4
stargazer(reg4, type="text")
## recordar calculo en excel
#CI=[coef−1.96×SE,coef+1.96×SE]
## derevida en excel para calcular edad pico (mayor ingreso)
############# PUNTO CUARTO ######################
## creación variable dummy de sexo
db_final<- db_final%>%mutate(mujer=ifelse(sex==1,
0,
1))
db_final<- db_final%>%mutate(log_ingreso=log(ingreso))
## Primer modelo diferencia de ingresos por sexo
mod1<-lm(log_ingreso~mujer,data=db_final)
mod1
## qué tan bueno es el modelo en la muestra
db_final$yhat_mod1 <-predict(mod1)
yhat_mod1<-predict(mod1,db_final)
mse_mod1<- mean((db_final$log_ingreso-yhat_mod1)^2)
mse_mod1
#partir en dos subset por hombre y por mujer y correr las regresiones, estimar y pointar los predichos
db_mujer <- db_final[db_final$sex == 0, ]
db_hombre <- db_final[db_final$sex == 1, ]
## Modelo con base exclusiva para mujeres
mod_m<-lm(log_ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_mujer)
mod_m
## Modelo con base exclusiva para hombres
mod_h<-lm(log_ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_hombre)
mod_h
## Gráfico de modelo por genero
plot(db_final$edad,db_final$log_ingreso,xlab = 'Edad', ylab='log_ingreso',cex=0.5)
abline(mod_m, col = "red")
abline(mod_h, col = "blue")
## Comprar modelos y exportarlos
stargazer(mod_m,mod_h,type="text",out = "/Users/usuario/Desktop/Problem_set_1_WS_JSV/Data/regresiones_por_sexo.htm")
##recordar hacer la derivada para los modelos por sexo
##bootstrap modelos por sexo
set.seed(2022)
prueba_boot.fn<-function(db_mujer,index){
## el index se utilizará para obtener los pesos para el bootstrap
coef(lm(log_ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_mujer, subset = index))
}
boot<-boot(db_mujer, prueba_boot.fn, R=1000)
boot
mod_m
stargazer(mod_m, type="text")
##hombre
set.seed(2022)
prueba_boot.fn<-function(db_hombre,index){
## el index se utilizará para obtener los pesos para el bootstrap
coef(lm(log_ingreso~edad+edad_sqr+niveleduc+tiempoempresa+tiempoempresa_sqr,data=db_hombre, subset = index))
}
boot<-boot(db_hombre, prueba_boot.fn, R=1000)
boot
mod_h
stargazer(mod_h, type="text")
## recordar contruir los intervalos de confianza en Excel
##controlar por ocupación para ver como se reduce la brecha y establecer la explicación de porque se disminuye dicha brecha
mod2<-lm(log_ingreso~mujer+as.factor(ocupacion),data=db_final)## primer modelo y~x
mod2
mod1
##teorema FWL
mod2
db_final<- db_final%>%mutate(ej=c(rep(0,nrow(db_final)-1),1))
tail(db_final)
##regresión con la variable ej
mod3<-lm(log_ingreso~mujer+ej,data=db_final) ## regresión con la dummy
mod3
db_final<-db_final %>% mutate(res_y_e=lm(log_ingreso~ej,db_final)$residuals,
res_x_e=lm(mujer~ej,db)$residuals,
)
mod4<-lm(res_y_e~res_x_e,db_final)
stargazer(mod1,mod3,mod4,type="text")
## qué tan bueno controlando por la empleabilidad en el modelo por sexo
db_final$yhat_mod2 <-predict(mod2)
yhat_mod2<-predict(mod2,db_final)
mse_mod2<- mean((db_final$log_ingreso-yhat_mod2)^2)
mse_mod2
############# PUNTO QUINTO ######################
#luego de hacer train y tren,  y después MSE error deben ir disminuyendo hasta un punto y luego subir, esto con cada partición de la muestra
set.seed(10101)
db_final$yhat_reg1 <-predict(reg1,db_final)
yhat_reg1<-predict(reg1,db_final)
mse_1<- mean((db_final$ingreso~yhat_reg1)^2)
db_final$yhat_reg2 <-predict(reg2)
yhat_reg2<-predict(reg2,db_final)
mse_2<- mean((db_final$ingreso~yhat_reg2)^2)
db_final$yhat_reg3 <-predict(reg3)
yhat_reg3<-predict(reg3,db_final)
mse_3<- mean((db_final$ingreso~yhat_reg3)^2)
db_final$yhat_reg4 <-predict(reg4)
yhat_reg4<-predict(reg4,db_final)
mse_4<- mean((db_final$ingreso~yhat_reg4)^2)
db_final$yhat_reg5 <-predict(reg5)
yhat_reg5<-predict(reg5,db_final)
mse_5<- mean((db_final$ingreso~yhat_reg5)^2)
db_final[db_final$actividad==1,]$yhat_reg5.1 <-predict(reg5.1)
yhat_reg5.1<-predict(reg5.1,db_final)
mse_5.1<- mean((db_final$ingreso~yhat_reg5.1)^2)
rm(list=ls())
cat("\014")
setwd("/Users/usuario/Desktop/Problem_set_2_WS_JSV")
dir
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2) ## caret
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
df_tra
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
skim(df_train_per_1$Ingtot)
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$Ingtot),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$Ingtot),]$P6040)
table(df_train_per_1[is.na(df_train_per_1$P6210s1),]$Depto)
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$P6210s1),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$P6210s1),]$P6040)
df_train_per_1 <- df_train_per_1 %>% mutate(Ingtot_fin=ifelse(is.na(Ingtot)==TRUE,
table(is.na(df_train_per_1$Ingtot_fin))
IngrXhog <- df_train_per_1 %>%  group_by(id) %>%
summarise(Ingtot_hog = sum(Ingtot_fin))
is.na(x$Ingtot_hog) %>% table()
names_df_tes_h <- colnames(df_test_hog)
vars_hogares<-c("id","Clase", "Dominio", "num_cuartos_hog", "num_cuartos_exclus_hog", "Ocupacion_vivienda", "pago_amortizacion",
"pago_estimado_arriendo", "pago_arriendo", "personas_x_hog", "personas_x_Ug", "Li", "Lp", "Fex_c", "Depto", "Fex_dpto")
names_df_tes_p <- colnames(df_test_per)
vars_personas<-c("id"              ,"Orden"          ,"Clase"        ,"Dominio"       ,"sexo"          ,"edad"          ,"parentesco"   ,"afiliacion_salud"  ,"regimen_salud"  ,"niv_educativo",
"escolaridad"     ,"actividad"  ,"oficio"       ,"tiempo_empresa","ocupacion_empleo"     ,"ReciHorasExtra","ReciPrimas"   ,"ReciBonificaciones","ReciAuxiAlimenta","ReciAuxiTransp",
"ReciSubsidFamil" ,"ReciSubsiEduc"  ,"AlimentoXpago","ViviendaXpago" ,"UsaRutaEmpresa","ReciIngEspecie","ReciPrimaServ","ReciPrimaNavid"    ,"ReciPrimaVaca"   ,"ReciViaticos",
"ReciBonificacion","HorasTrabSemana","P6870"        ,"cotiza_pension","P7040"         ,"P7045"         ,"P7050"        ,"P7090"             ,"P7110"           ,"P7120",
"P7150"           ,"P7160"          ,"P7310"        ,"P7350"         ,"P7422"         ,"P7472"         ,"P7495"        ,"P7500s2"           ,"P7500s3"         ,"P7505",
"P7510s1"         ,"ReciRemesas"    ,"ReciAyudaInst","P7510s5"       ,"P7510s6"       ,"P7510s7"       ,"PET"          ,"Ocupado"           ,"Descupado"      ,"Inactivo",
"Fex_c"           ,"Depto"          ,"Fex_dpto")
colnames(df_test_per) <- vars_personas
colnames(df_train_per) <- vars_personas
colnames(df_test_hog) <- vars_hogares
colnames(df_train_hog) <- vars_hogares
df_train_per <- df_train_per %>% mutate(df_train_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
df_train_hog_vars <- df_train_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
var_train_pers_sexo <-  dcast(df_train_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_train_pers_sexo <- var_train_pers_sexo %>% mutate(prop_hombre=var_train_pers_sexo[,"1"]/var_train_pers_sexo[,"(all)"],
prop_mujer=var_train_pers_sexo[,"2"]/var_train_pers_sexo[,"(all)"])
var_train_pers_sexo <- var_train_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
var_train_pers_reg <-  dcast(df_train_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_train_pers_reg <- var_train_pers_reg %>% mutate(ContEspec=var_train_pers_reg[,"1"]/var_train_pers_reg[,"(all)"],
Subsidiado=var_train_pers_reg[,"3"]/var_train_pers_reg[,"(all)"])
var_train_pers_reg <- var_train_pers_reg[,c("id", "ContEspec", "Subsidiado")]
var_train_pers_cotiz <-  dcast(df_train_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_train_pers_cotiz <- var_train_pers_cotiz %>% mutate(prop_si_cotiza=var_train_pers_cotiz[,"1"]/var_train_pers_cotiz[,"(all)"],
prop_no_cotiza=var_train_pers_cotiz[,"2"]/var_train_pers_cotiz[,"(all)"],
Pensionado=var_train_pers_cotiz[,"3"]/var_train_pers_cotiz[,"(all)"])
var_train_pers_cotiz <- var_train_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
df_test_per <- df_test_per %>% mutate(df_test_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
df_test_hog_vars <- df_test_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
var_test_pers_sexo <-  dcast(df_test_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_test_pers_sexo <- var_test_pers_sexo %>% mutate(prop_hombre=var_test_pers_sexo[,"1"]/var_test_pers_sexo[,"(all)"],
prop_mujer=var_test_pers_sexo[,"2"]/var_test_pers_sexo[,"(all)"])
var_test_pers_sexo <- var_test_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
var_test_pers_reg <-  dcast(df_test_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_test_pers_reg <- var_test_pers_reg %>% mutate(ContEspec=var_test_pers_reg[,"1"]/var_test_pers_reg[,"(all)"],
Subsidiado=var_test_pers_reg[,"3"]/var_test_pers_reg[,"(all)"])
var_test_pers_reg <- var_test_pers_reg[,c("id", "ContEspec", "Subsidiado")]
var_test_pers_cotiz <-  dcast(df_test_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_test_pers_cotiz <- var_test_pers_cotiz %>% mutate(prop_si_cotiza=var_test_pers_cotiz[,"1"]/var_test_pers_cotiz[,"(all)"],
prop_no_cotiza=var_test_pers_cotiz[,"2"]/var_test_pers_cotiz[,"(all)"],
Pensionado=var_test_pers_cotiz[,"3"]/var_test_pers_cotiz[,"(all)"])
var_test_pers_cotiz <- var_test_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
df_train_hog_final <- df_train_hog %>% left_join(IngrXhog, by="id") %>%
left_join(df_train_hog_vars, by="id") %>%
left_join(var_train_pers_sexo, by="id") %>%
left_join(var_train_pers_reg, by="id") %>%
left_join(var_train_pers_cotiz, by="id") %>%  mutate(Pobre=ifelse(Ingtot_hog<Lp*personas_x_Ug,
1,
0)) %>%
mutate(Pobre=factor(Pobre, level=c(1,0), labels=c("Pobre", "No_Pobre")))
rm(list=ls())
cat("\014")
setwd("/Users/usuario/Desktop/Problem_set_2_WS_JSV")
dir()
# Cargar librerías -----------------------------------------------------------
require(pacman)
p_load(tidyverse,dplyr,here, rvest, tibble,rio,skimr,stargazer,reshape2) ## caret
## dejamos caret para llamarlo más adelante, Nota: predit de 'caret' y predit de 'Stats' (base) generan diferentes resultados
## por lo tanto debemos cerciorarnos que estemos usando el correcto. Para el glm utilizamos el base
df_id <- read_rds("Data/submission_template.rds")
df_test_hog <- read_rds("Data/test_hogares.rds")
df_test_per <- read_rds("Data/test_personas.rds")
df_train_hog <- read_rds("Data/train_hogares.rds")
df_train_per_1 <- read_rds("Data/train_personas.rds")
df_train_per <- df_train_per_1[,colnames(df_test_per)]
df_train_hog <- df_train_hog[,colnames(df_test_hog)]
# Revisión y cruce de bases de datos --------------------------------------
## Imputamos los ingresos totales en na con 0 (cero) ya que son niños con edad<=11 años que no deberían estar debengando un ingreso
skim(df_train_per_1$Ingtot)
##revisar ingresos nulos
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$Ingtot),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$Ingtot),]$P6040)
table(df_train_per_1[is.na(df_train_per_1$P6210s1),]$Depto)
#View(df_train_per_1[is.na(df_train_per_1$P6210s1),])
ggplot() +
geom_histogram(df_train_per_1[is.na(df_train_per_1$P6210s1),],mapping = aes(x=P6040))
skim(df_train_per_1[is.na(df_train_per_1$P6210s1),]$P6040)
## Renombrar variables---------------------------------------------
df_train_per_1 <- df_train_per_1 %>% mutate(Ingtot_fin=ifelse(is.na(Ingtot)==TRUE,
0,
Ingtot))
table(is.na(df_train_per_1$Ingtot_fin))
## Ingresos totales por hogar
IngrXhog <- df_train_per_1 %>%  group_by(id) %>%
summarise(Ingtot_hog = sum(Ingtot_fin))
is.na(x$Ingtot_hog) %>% table()
names_df_tes_h <- colnames(df_test_hog)
vars_hogares<-c("id","Clase", "Dominio", "num_cuartos_hog", "num_cuartos_exclus_hog", "Ocupacion_vivienda", "pago_amortizacion",
"pago_estimado_arriendo", "pago_arriendo", "personas_x_hog", "personas_x_Ug", "Li", "Lp", "Fex_c", "Depto", "Fex_dpto")
names_df_tes_p <- colnames(df_test_per)
vars_personas<-c("id"              ,"Orden"          ,"Clase"        ,"Dominio"       ,"sexo"          ,"edad"          ,"parentesco"   ,"afiliacion_salud"  ,"regimen_salud"  ,"niv_educativo",
"escolaridad"     ,"actividad"  ,"oficio"       ,"tiempo_empresa","ocupacion_empleo"     ,"ReciHorasExtra","ReciPrimas"   ,"ReciBonificaciones","ReciAuxiAlimenta","ReciAuxiTransp",
"ReciSubsidFamil" ,"ReciSubsiEduc"  ,"AlimentoXpago","ViviendaXpago" ,"UsaRutaEmpresa","ReciIngEspecie","ReciPrimaServ","ReciPrimaNavid"    ,"ReciPrimaVaca"   ,"ReciViaticos",
"ReciBonificacion","HorasTrabSemana","P6870"        ,"cotiza_pension","P7040"         ,"P7045"         ,"P7050"        ,"P7090"             ,"P7110"           ,"P7120",
"P7150"           ,"P7160"          ,"P7310"        ,"P7350"         ,"P7422"         ,"P7472"         ,"P7495"        ,"P7500s2"           ,"P7500s3"         ,"P7505",
"P7510s1"         ,"ReciRemesas"    ,"ReciAyudaInst","P7510s5"       ,"P7510s6"       ,"P7510s7"       ,"PET"          ,"Ocupado"           ,"Descupado"      ,"Inactivo",
"Fex_c"           ,"Depto"          ,"Fex_dpto")
#h_test_dicc <- cbind(names_df_tes_h,vars_hogares)
#p_test_dicc <- cbind(names_df_tes_p,vars_personas)
colnames(df_test_per) <- vars_personas
colnames(df_train_per) <- vars_personas
colnames(df_test_hog) <- vars_hogares
colnames(df_train_hog) <- vars_hogares
# Revisión y definición de variables ---------------------------------------
# Hogares
#'num_cuartos_exclus_hog', 'Ocupacion_vivienda', 'clase', "personas_x_hog", "personas_x_Ug" "Depto"
df_train_per <- df_train_per %>% mutate(df_train_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
## AGRUPAR POR HOGAR PARA VARIABLES DE ACTIVIDAD Y NIVEL EDUC DEL JEFE, EDAD PROMEDIO,
df_train_hog_vars <- df_train_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
## Proporción de hombres y mujeres
var_train_pers_sexo <-  dcast(df_train_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_train_pers_sexo <- var_train_pers_sexo %>% mutate(prop_hombre=var_train_pers_sexo[,"1"]/var_train_pers_sexo[,"(all)"],
prop_mujer=var_train_pers_sexo[,"2"]/var_train_pers_sexo[,"(all)"])
var_train_pers_sexo <- var_train_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
## Variables: proporción Contributivo o Especial y Reg Subsidiado
var_train_pers_reg <-  dcast(df_train_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_train_pers_reg <- var_train_pers_reg %>% mutate(ContEspec=var_train_pers_reg[,"1"]/var_train_pers_reg[,"(all)"],
Subsidiado=var_train_pers_reg[,"3"]/var_train_pers_reg[,"(all)"])
var_train_pers_reg <- var_train_pers_reg[,c("id", "ContEspec", "Subsidiado")]
## Variables: proporción Cotiza pensión
var_train_pers_cotiz <-  dcast(df_train_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_train_pers_cotiz <- var_train_pers_cotiz %>% mutate(prop_si_cotiza=var_train_pers_cotiz[,"1"]/var_train_pers_cotiz[,"(all)"],
prop_no_cotiza=var_train_pers_cotiz[,"2"]/var_train_pers_cotiz[,"(all)"],
Pensionado=var_train_pers_cotiz[,"3"]/var_train_pers_cotiz[,"(all)"])
var_train_pers_cotiz <- var_train_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
## TEST ------------------------------------------------------------------
df_test_per <- df_test_per %>% mutate(df_test_per,z=1,
regimen=ifelse(regimen_salud==1 | regimen_salud==2,
1,
regimen_salud),
actividad_jef=ifelse(parentesco==1,
actividad,
0),
niv_educ_jef=ifelse(parentesco==1,
niv_educativo,
0))
## AGRUPAR POR HOGAR PARA VARIABLES DE ACTIVIDAD Y NIVEL EDUC DEL JEFE, EDAD PROMEDIO,
df_test_hog_vars <- df_test_per %>%  group_by(id) %>%
summarise(edad_media = mean(edad),
actividad_jef = max(actividad_jef),
niv_educ_jef = max(niv_educ_jef))
## Proporción de hombres y mujeres
var_test_pers_sexo <-  dcast(df_test_per[,c('id','sexo','z')],
id ~ sexo,
fun.aggregate = sum,
value.var = "z",
margins="sexo")
var_test_pers_sexo <- var_test_pers_sexo %>% mutate(prop_hombre=var_test_pers_sexo[,"1"]/var_test_pers_sexo[,"(all)"],
prop_mujer=var_test_pers_sexo[,"2"]/var_test_pers_sexo[,"(all)"])
var_test_pers_sexo <- var_test_pers_sexo[,c("id", "prop_hombre", "prop_mujer")]
## Variables: proporción Contributivo o Especial y Reg Subsidiado
var_test_pers_reg <-  dcast(df_test_per[,c('id','regimen','z')],
id ~ regimen,
fun.aggregate = sum,
value.var = "z",
margins="regimen")
var_test_pers_reg <- var_test_pers_reg %>% mutate(ContEspec=var_test_pers_reg[,"1"]/var_test_pers_reg[,"(all)"],
Subsidiado=var_test_pers_reg[,"3"]/var_test_pers_reg[,"(all)"])
var_test_pers_reg <- var_test_pers_reg[,c("id", "ContEspec", "Subsidiado")]
## Variables: proporción Cotiza pensión
var_test_pers_cotiz <-  dcast(df_test_per[,c('id','cotiza_pension','z')],
id ~ cotiza_pension,
fun.aggregate = sum,
value.var = "z",
margins="cotiza_pension")
var_test_pers_cotiz <- var_test_pers_cotiz %>% mutate(prop_si_cotiza=var_test_pers_cotiz[,"1"]/var_test_pers_cotiz[,"(all)"],
prop_no_cotiza=var_test_pers_cotiz[,"2"]/var_test_pers_cotiz[,"(all)"],
Pensionado=var_test_pers_cotiz[,"3"]/var_test_pers_cotiz[,"(all)"])
var_test_pers_cotiz <- var_test_pers_cotiz[,c("id", "prop_si_cotiza", "prop_no_cotiza", "Pensionado")]
?glmnet
### Formación final de las Bases de hogar para Train y Test ------------------------------------------
## Train
df_train_hog_final <- df_train_hog %>% left_join(IngrXhog, by="id") %>%
left_join(df_train_hog_vars, by="id") %>%
left_join(var_train_pers_sexo, by="id") %>%
left_join(var_train_pers_reg, by="id") %>%
left_join(var_train_pers_cotiz, by="id") %>%  mutate(Pobre=ifelse(Ingtot_hog<Lp*personas_x_Ug,
1,
0)) %>%
mutate(Pobre=factor(Pobre, level=c(1,0), labels=c("Pobre", "No_Pobre")))
